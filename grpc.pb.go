// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package stream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Header struct {
	RequestTimestamp     int64    `protobuf:"varint,1,opt,name=requestTimestamp,proto3" json:"requestTimestamp,omitempty"`
	ResponseTimestamp    int64    `protobuf:"varint,2,opt,name=responseTimestamp,proto3" json:"responseTimestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{0}
}

func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetRequestTimestamp() int64 {
	if m != nil {
		return m.RequestTimestamp
	}
	return 0
}

func (m *Header) GetResponseTimestamp() int64 {
	if m != nil {
		return m.ResponseTimestamp
	}
	return 0
}

type Body struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Body) Reset()         { *m = Body{} }
func (m *Body) String() string { return proto.CompactTextString(m) }
func (*Body) ProtoMessage()    {}
func (*Body) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{1}
}

func (m *Body) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Body.Unmarshal(m, b)
}
func (m *Body) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Body.Marshal(b, m, deterministic)
}
func (m *Body) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Body.Merge(m, src)
}
func (m *Body) XXX_Size() int {
	return xxx_messageInfo_Body.Size(m)
}
func (m *Body) XXX_DiscardUnknown() {
	xxx_messageInfo_Body.DiscardUnknown(m)
}

var xxx_messageInfo_Body proto.InternalMessageInfo

func (m *Body) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Request struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Body                 *Body    `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{2}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Request) GetBody() *Body {
	if m != nil {
		return m.Body
	}
	return nil
}

type Response struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Body                 *Body    `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{3}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Response) GetBody() *Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "stream.Header")
	proto.RegisterType((*Body)(nil), "stream.Body")
	proto.RegisterType((*Request)(nil), "stream.Request")
	proto.RegisterType((*Response)(nil), "stream.Response")
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600) }

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xed, 0x2c, 0x55, 0xdf, 0x44, 0xe7, 0xbb, 0x28, 0x3d, 0x8d, 0x1e, 0x64, 0x88, 0x94,
	0x59, 0xbf, 0x80, 0x08, 0xa2, 0xe7, 0x74, 0x5f, 0x20, 0x4d, 0x1e, 0x1a, 0x58, 0x9b, 0xf8, 0x12,
	0x07, 0xbb, 0xfb, 0xc1, 0x65, 0x69, 0xc7, 0x0e, 0x3b, 0x39, 0x76, 0x0b, 0xef, 0xff, 0xcf, 0xef,
	0xfd, 0x02, 0x01, 0xf8, 0x64, 0xa7, 0x4a, 0xc7, 0x36, 0x58, 0xcc, 0x7c, 0x60, 0x92, 0x6d, 0xd1,
	0x40, 0xf6, 0x41, 0x52, 0x13, 0xe3, 0x03, 0x4c, 0x98, 0xbe, 0x7f, 0xc8, 0x87, 0x85, 0x69, 0xc9,
	0x07, 0xd9, 0xba, 0xbb, 0x64, 0x9a, 0xcc, 0x4e, 0xc5, 0xde, 0x1c, 0x1f, 0xe1, 0x86, 0xc9, 0x3b,
	0xdb, 0x79, 0xda, 0x95, 0x47, 0xb1, 0xbc, 0x1f, 0x14, 0x39, 0xa4, 0xaf, 0x56, 0xaf, 0x11, 0x21,
	0xd5, 0x32, 0xc8, 0x48, 0xbd, 0x10, 0xf1, 0x5c, 0xd4, 0x70, 0x26, 0x7a, 0x3a, 0xde, 0x43, 0xf6,
	0x15, 0x55, 0x62, 0x61, 0x5c, 0x5d, 0x95, 0xbd, 0x63, 0xd9, 0x0b, 0x8a, 0x21, 0xc5, 0x29, 0xa4,
	0x8d, 0xd5, 0xeb, 0xb8, 0x6f, 0x5c, 0x5d, 0x6e, 0x5b, 0x9b, 0x15, 0x22, 0x26, 0xc5, 0x02, 0xce,
	0xc5, 0x60, 0x71, 0x3c, 0x6a, 0xf5, 0x3b, 0x82, 0xf4, 0x9d, 0x9d, 0xc2, 0x27, 0x00, 0x76, 0xaa,
	0x26, 0x5e, 0x19, 0x45, 0x78, 0xbd, 0xad, 0x0e, 0xef, 0xc8, 0x27, 0xbb, 0x41, 0xef, 0x50, 0x9c,
	0xe0, 0x0b, 0xdc, 0x7a, 0xe2, 0x15, 0x71, 0x6d, 0x34, 0xd5, 0x31, 0xfe, 0xcf, 0xfd, 0x79, 0xb2,
	0x21, 0xa8, 0xa5, 0xa1, 0x2e, 0x1c, 0x46, 0x98, 0x25, 0xf8, 0x06, 0x79, 0x63, 0xb4, 0x61, 0x52,
	0xc1, 0xd8, 0x4e, 0x2e, 0x0f, 0x81, 0xcc, 0x93, 0x26, 0x8b, 0x1f, 0xe8, 0xf9, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0xa7, 0xcd, 0xd5, 0x52, 0x4e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrpcClient is the client API for Grpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcClient interface {
	RpcService(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ServerSideStreamService(ctx context.Context, in *Request, opts ...grpc.CallOption) (Grpc_ServerSideStreamServiceClient, error)
	ClientSideStreamService(ctx context.Context, opts ...grpc.CallOption) (Grpc_ClientSideStreamServiceClient, error)
	BidirectionalStreamService(ctx context.Context, opts ...grpc.CallOption) (Grpc_BidirectionalStreamServiceClient, error)
}

type grpcClient struct {
	cc *grpc.ClientConn
}

func NewGrpcClient(cc *grpc.ClientConn) GrpcClient {
	return &grpcClient{cc}
}

func (c *grpcClient) RpcService(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/stream.Grpc/rpcService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) ServerSideStreamService(ctx context.Context, in *Request, opts ...grpc.CallOption) (Grpc_ServerSideStreamServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grpc_serviceDesc.Streams[0], "/stream.Grpc/serverSideStreamService", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServerSideStreamServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Grpc_ServerSideStreamServiceClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type grpcServerSideStreamServiceClient struct {
	grpc.ClientStream
}

func (x *grpcServerSideStreamServiceClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcClient) ClientSideStreamService(ctx context.Context, opts ...grpc.CallOption) (Grpc_ClientSideStreamServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grpc_serviceDesc.Streams[1], "/stream.Grpc/clientSideStreamService", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcClientSideStreamServiceClient{stream}
	return x, nil
}

type Grpc_ClientSideStreamServiceClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type grpcClientSideStreamServiceClient struct {
	grpc.ClientStream
}

func (x *grpcClientSideStreamServiceClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcClientSideStreamServiceClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcClient) BidirectionalStreamService(ctx context.Context, opts ...grpc.CallOption) (Grpc_BidirectionalStreamServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Grpc_serviceDesc.Streams[2], "/stream.Grpc/bidirectionalStreamService", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcBidirectionalStreamServiceClient{stream}
	return x, nil
}

type Grpc_BidirectionalStreamServiceClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type grpcBidirectionalStreamServiceClient struct {
	grpc.ClientStream
}

func (x *grpcBidirectionalStreamServiceClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcBidirectionalStreamServiceClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcServer is the server API for Grpc service.
type GrpcServer interface {
	RpcService(context.Context, *Request) (*Response, error)
	ServerSideStreamService(*Request, Grpc_ServerSideStreamServiceServer) error
	ClientSideStreamService(Grpc_ClientSideStreamServiceServer) error
	BidirectionalStreamService(Grpc_BidirectionalStreamServiceServer) error
}

func RegisterGrpcServer(s *grpc.Server, srv GrpcServer) {
	s.RegisterService(&_Grpc_serviceDesc, srv)
}

func _Grpc_RpcService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).RpcService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.Grpc/RpcService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).RpcService(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_ServerSideStreamService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServer).ServerSideStreamService(m, &grpcServerSideStreamServiceServer{stream})
}

type Grpc_ServerSideStreamServiceServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type grpcServerSideStreamServiceServer struct {
	grpc.ServerStream
}

func (x *grpcServerSideStreamServiceServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Grpc_ClientSideStreamService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServer).ClientSideStreamService(&grpcClientSideStreamServiceServer{stream})
}

type Grpc_ClientSideStreamServiceServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type grpcClientSideStreamServiceServer struct {
	grpc.ServerStream
}

func (x *grpcClientSideStreamServiceServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcClientSideStreamServiceServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Grpc_BidirectionalStreamService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServer).BidirectionalStreamService(&grpcBidirectionalStreamServiceServer{stream})
}

type Grpc_BidirectionalStreamServiceServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type grpcBidirectionalStreamServiceServer struct {
	grpc.ServerStream
}

func (x *grpcBidirectionalStreamServiceServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcBidirectionalStreamServiceServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Grpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Grpc",
	HandlerType: (*GrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rpcService",
			Handler:    _Grpc_RpcService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "serverSideStreamService",
			Handler:       _Grpc_ServerSideStreamService_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "clientSideStreamService",
			Handler:       _Grpc_ClientSideStreamService_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "bidirectionalStreamService",
			Handler:       _Grpc_BidirectionalStreamService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
